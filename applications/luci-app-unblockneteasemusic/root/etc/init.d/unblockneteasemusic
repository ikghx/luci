#!/bin/sh /etc/rc.common
# SPDX-License-Identifier: GPL-3.0-only
#
# Copyright (C) 2019-2022 Tianling Shen <cnsztl@immortalwrt.org>

USE_PROCD=1

START=99
STOP=10

NAME="unblockneteasemusic"
UPGRADE_CONF="/lib/upgrade/keep.d/$NAME"

RULES_UC="/usr/share/$NAME/rules/default.uc"
RULES_NFT="/etc/nftables.d/90-$NAME-rules.nft"

is_enabled() {
	local enabled
	config_get_bool enabled "$1" "$2" "${3:-0}"
	if [ "$enabled" -eq "1" ]; then
		return 0
	else
		return 1
	fi
}

append_param() {
	procd_append_param command "$1" $2
}

append_param_arg() {
	local value
	config_get value "$1" "$2" $4
	[ -n "$value" ] && append_param "$3" "$value"
}

append_param_env() {
	local value
	config_get value "$1" "$2" $4
	[ -n "$value" ] && procd_append_param env "$3"="$value"
}

append_filter_client() {
	local cfg="$1"

	local enabled
	config_get_bool enabled "$cfg" "enable"
	[ "$enabled" = "1" ] || return 1

	local ip_addr filter_mode
	config_get ip_addr "$cfg" "ip_addr"
	config_get filter_mode "$cfg" "filter_mode"
	[ -n "$ip_addr" -a -n "$filter_mode" ] || return 1

	case "${filter_mode}" in
	"disable_http")
		acl_http_addr="${acl_http_addr:+$acl_http_addr\n}${ip_addr}"
		;;
	"disable_https")
		acl_https_addr="${acl_https_addr:+$acl_https_addr\n}${ip_addr}"
		;;
	"disable_all")
		acl_http_addr="${acl_http_addr:+$acl_http_addr\n}${ip_addr}"
		acl_https_addr="${acl_https_addr:+$acl_https_addr\n}${ip_addr}"
		;;
	esac
}

start_service() {
	config_load "$NAME"
	is_enabled "config" "enable" || exit 1

	local update_time
	config_get update_time "config" "update_time" "3"
	sed -i "/$NAME/d" /etc/crontabs/root
	is_enabled "config" "auto_update" && echo "0 ${update_time} * * * /usr/share/$NAME/update.sh update_core" >> "/etc/crontabs/root"
	echo "*/5 * * * * /usr/share/$NAME/log_check.sh" >> "/etc/crontabs/root"
	/etc/init.d/cron restart

	[ ! -s "/usr/share/$NAME/core/app.js" ] && { rm -f "/usr/share/$NAME/local_ver"; sh "/usr/share/$NAME/update.sh" "update_core_non_restart"; }
	[ ! -s "/usr/share/$NAME/core/app.js" ] && { echo "Core Not Found, please download it before starting." >> "/tmp/$NAME.log"; exit 1; }

	procd_open_instance "$NAME"
	procd_set_param command node "/usr/share/$NAME/core/app.js"
	append_param "-a" "0.0.0.0"

	local http_port https_port hijack_ways
	config_get http_port "config" "http_port" "5200"
	config_get https_port "config" "https_port" "5201"
	config_get hijack_ways "config" "hijack_ways" "use_ipset"
	[ "${hijack_ways}" = "use_hosts" ] && { http_port="80"; https_port="443"; }
	append_param "-p" "${http_port}":"${https_port}"

	json_init
	if is_enabled "config" "pub_access"; then
		json_add_int o_pub_access "1"
	else
		json_add_int o_pub_access "0"
	fi
	json_add_int o_http_port "${http_port}"
	json_add_int o_https_port "${https_port}"
	json_add_string o_hijack_ways "${hijack_ways}"

	local music_source
	config_get music_source "config" "music_source" "default"
	[ "${music_source}" != "default" ] && append_param -o "${music_source}"

	append_param_arg "config" "cnrelay" "-c"
	append_param_arg "config" "endpoint_url" "-e" "https://music.163.com"
	append_param_arg "config" "netease_server_ip" "-f"
	append_param_arg "config" "proxy_server_ip" "-u"
	is_enabled "config" "strict_mode" && append_param "-s"

	local log_level
	config_get log_level "config" "log_level" "info"
	procd_set_param env LOG_FILE="/tmp/$NAME.log"
	procd_append_param env LOG_LEVEL="$log_level"

	append_param_env "config" "joox_cookie" "JOOX_COOKIE"
	append_param_env "config" "qq_cookie" "QQ_COOKIE"
	append_param_env "config" "youtube_key" "YOUTUBE_KEY"
	append_param_env "config" "self_issue_cert_crt" "SIGN_CERT" "/usr/share/$NAME/core/server.crt"
	append_param_env "config" "self_issue_cert_key" "SIGN_KEY" "/usr/share/$NAME/core/server.key"

	is_enabled "config" "enable_flac" && procd_append_param env ENABLE_FLAC="true"
	is_enabled "config" "local_vip" && procd_append_param env ENABLE_LOCAL_VIP="true"
	case "$(config_get "config" "replace_music_source")" in
		"lower_than_192kbps") procd_append_param env MIN_BR="192000" ;;
		"lower_than_320kbps") procd_append_param env MIN_BR="320000" ;;
		"lower_than_999kbps") procd_append_param env MIN_BR="600000" ;;
		"replace_all") procd_append_param env MIN_BR="9999999" ;;
	esac

	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn

	local lan_addr="$(uci -q get network.lan.ipaddr)"
	local tmp="/tmp/$NAME"
	if [ "${hijack_ways}" = "use_ipset" ]; then
		local settype nftflag
		if dnsmasq --version | grep -q 'Compile time options:.* nftset'; then
			settype="nftset"
			nftflag="inet#fw4#"
		else
			settype="ipset"
		fi
		mkdir -p "/tmp/dnsmasq.d"
		rm -f "/tmp/dnsmasq.d/dnsmasq-$NAME.conf"
		cat <<-EOF > "/tmp/dnsmasq.d/dnsmasq-$NAME.conf"
			dhcp-option=252,http://${lan_addr}:${http_port}/proxy.pac
			${settype}=/.music.163.com/${nftflag}neteasemusic
			${settype}=/interface.music.163.com/${nftflag}neteasemusic
			${settype}=/interface3.music.163.com/${nftflag}neteasemusic
			${settype}=/apm.music.163.com/${nftflag}neteasemusic
			${settype}=/apm3.music.163.com/${nftflag}neteasemusic
			${settype}=/clientlog.music.163.com/${nftflag}neteasemusic
			${settype}=/clientlog3.music.163.com/${nftflag}neteasemusic
		EOF
		/etc/init.d/dnsmasq reload

		config_foreach append_filter_client "acl_rule"

		local netease_music_ips="$(uclient-fetch -qO- "http://httpdns.n.netease.com/httpdns/v2/d?domain=music.163.com,interface.music.163.com,interface3.music.163.com,apm.music.163.com,apm3.music.163.com,clientlog.music.163.com,clientlog3.music.163.com" |jsonfilter -e '@.data.*.ip.*')"
		local netease_music_ips2="$(uclient-fetch -qO- "https://music.httpdns.c.163.com/d" --post-data="music.163.com,interface.music.163.com,interface3.music.163.com,apm.music.163.com,apm3.music.163.com,clientlog.music.163.com,clientlog3.music.163.com" |jsonfilter -e '@.dns.*["ips"].*')"
		local neteasemusic_addr="$(echo -e "${netease_music_ips}\n${netease_music_ips2}" | sort -u | awk '{print $1}')"

		json_add_string o_acl_http_addr "$(echo -e "${acl_http_addr}" | sort -u | awk '{print $1}')"
		json_add_string o_acl_https_addr "$(echo -e "${acl_https_addr}" | sort -u | awk '{print $1}')"
		json_add_string o_neteasemusic_addr "$neteasemusic_addr"
	elif [ "${hijack_ways}" = "use_hosts" ]; then
		mkdir -p "/tmp/dnsmasq.d"
		rm -f "/tmp/dnsmasq.d/dnsmasq-$NAME.conf"
		cat <<-EOF > "/tmp/dnsmasq.d/dnsmasq-$NAME.conf"
			dhcp-option=252,http://${lan_addr}:${http_port}/proxy.pac
			address=/music.163.com/${lan_addr}
			address=/interface.music.163.com/${lan_addr}
			address=/interface3.music.163.com/${lan_addr}
			address=/apm.music.163.com/${lan_addr}
			address=/apm3.music.163.com/${lan_addr}
			address=/clientlog.music.163.com/${lan_addr}
			address=/clientlog3.music.163.com/${lan_addr}
			address=/music.httpdns.c.163.com/0.0.0.0
		EOF
		/etc/init.d/dnsmasq reload

		ip route add "223.252.199.10" dev lo
	fi

	json_dump -i >"$tmp.json"
	if utpl -F "$tmp.json" -S "$RULES_UC" > "$tmp.nft" && ! cmp -s "$tmp.nft" "$RULES_NFT"; then
		echo "table inet chk {include \"$tmp.nft\";}" > "$tmp.nft.chk"
		! nft -f "$tmp.nft.chk" -c || { mv -f "$tmp.nft" "$RULES_NFT"; fw4 reload; }
	fi
	rm -f "$tmp.json" "$tmp.nft" "$tmp.nft.chk"

	procd_close_instance
} >"/dev/null" 2>&1

stop_service() {
	config_load "$NAME"

	sed -i "/$NAME/d" "/etc/crontabs/root"
	/etc/init.d/cron restart

	rm -f "${UPGRADE_CONF}"
	is_enabled "config" "keep_core_when_upgrade" && {
		echo "/usr/share/$NAME/core/" >> "${UPGRADE_CONF}"
		echo "/usr/share/$NAME/local_ver" >> "${UPGRADE_CONF}"
	}

	local self_issue_cert_crt self_issue_cert_key
	config_get "self_issue_cert_crt" "config" "self_issue_cert_crt"
	config_get "self_issue_cert_key" "config" "self_issue_cert_key"
	{ [ -f "${self_issue_cert_crt}" ] && [ -f "${self_issue_cert_key}" ]; } && {
		echo "${self_issue_cert_crt}" >> "${UPGRADE_CONF}"
		echo "${self_issue_cert_key}" >> "${UPGRADE_CONF}"
	}

	local chain settable
	for chain in "netease_cloud_music_redir" "netease_cloud_music"; do
		nft flush chain inet fw4 "$chain"
	done
	for settable in "acl_neteasemusic_http" "acl_neteasemusic_https" "local_addr" "neteasemusic"; do
		nft flush set inet fw4 "$set"
	done

	rm -f "$RULES_NFT"
	fw4 reload

	rm -f "/tmp/dnsmasq.d/dnsmasq-$NAME.conf"
	/etc/init.d/dnsmasq reload

	ip route del "223.252.199.10"

	rm -f "/tmp/$NAME.log"
} >"/dev/null" 2>&1

reload_service() {
	stop
	start
}

service_triggers() {
	procd_add_reload_trigger "$NAME"
}
